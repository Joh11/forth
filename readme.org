#+title: A simple Forth interpreter

Left to implement:
- strings
- unit tests (cf the [[https://forth-standard.org/standard/testsuite][forth standard]])
- more comprehensible errors
- interpreter in forth
- documentation for words
- floating-point arithmetic
- arrays

* C API
** Define primitive word
#+begin_src c
  void donot(forth_t* f) { push(f, !pop(f)); }
#+end_src
#+begin_src c
  push_primitive_word(f, "not", 0, donot);
#+end_src
** Define forth word
#+begin_src c
  push_forth_word(f, "test", 0, (u8*[]){
	  find_word(f, "word"),
	  find_word(f, "find-word"),
	  NULL
      });
#+end_src
Take a list of words, *not code words*. Terminate the list with
~NULL~.
** Define raw forth
#+begin_src c
  push_forth_word_raw(f, "test-0branch", 0, (u64[]){
	  cast(u64, codeword(find_word(f, "lit"))), 42,
	  cast(u64, codeword(find_word(f, "dup"))),
	  cast(u64, codeword(find_word(f, "-"))),
	  cast(u64, codeword(find_word(f, "0branch"))), 2,
	  cast(u64, codeword(find_word(f, "lit"))), 2,
	  cast(u64, codeword(find_word(f, "lit"))), 3,
	  0
      });
#+end_src
Take a list of quads to compile directly; useful because
~push_forth_word~ does not allow compilation of literals. This is
still not perfect, since one still cannot compile 0, as it is used as
a list terminator.
